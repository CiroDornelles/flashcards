"pergunta","resposta"
"O que é a estrutura condicional `if` no Bash?","A estrutura `if` executa uma lista de comandos se o status de saída de outra lista de comandos for zero (sucesso)."
"Qual a sintaxe básica de um `if` no Bash?","A sintaxe básica é `if LISTA; then LISTA; fi`."
"Como adicionar uma condição `else` a um `if` no Bash?","Use `if LISTA; then LISTA; else LISTA; fi`."
"Como adicionar múltiplas condições `elif` a um `if` no Bash?","Use `if LISTA; then LISTA; elif LISTA; then LISTA; else LISTA; fi`."
"Qual o propósito do comando composto `[[ expression ]]` no Bash?","O comando composto `[[ expression ]]` retorna um status de 0 ou 1 dependendo da avaliação da expressão condicional. Ele não realiza divisão de palavras e expansão de nomes de caminho."
"Qual a diferença entre `test` ou `[` e `[[` para expressões condicionais no Bash?","`test` e `[` são comandos externos ou builtins que avaliam expressões condicionais"," mas `[[` é uma palavra-chave do Bash que oferece recursos aprimorados"," como não realizar divisão de palavras e expansão de nomes de caminho"," e suporta operadores como `=~` (regex)."
"Como verificar se um arquivo existe e é um diretório usando `[[` no Bash?","Use `[[ -d ""/caminho/para/diretorio"" ]]`."
"Como verificar se duas strings são iguais usando `[[` no Bash?","Use `[[ ""string1"" == ""string2"" ]]` ou `[[ ""string1"" = ""string2"" ]]`."
"Como verificar se uma string não é vazia usando `[[` no Bash?","Use `[[ -n ""string"" ]]`."
"Como verificar se um número é maior que outro usando `[[` no Bash?","Use `[[ num1 -gt num2 ]]`."
"Como combinar múltiplas expressões em `[[` com um operador AND lógico?","Use `[[ expression1 && expression2 ]]`."
"Como combinar múltiplas expressões em `[[` com um operador OR lógico?","Use `[[ expression1 || expression2 ]]`."
"O que acontece se uma expressão em `[[` usa o operador `=~`?","O operador `=~` trata a string à direita como uma expressão regular estendida POSIX e verifica se a string à esquerda corresponde ao padrão."
